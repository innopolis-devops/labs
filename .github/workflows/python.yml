name: Python CI/CD

on:
  push:
    branches: 
      - master
    tags:
  pull_request:
    branches: 
      - master
      - lab*
    paths:
      - app_python/**
      - .github/workflows/python.yml

defaults:
  run:
    working-directory: app_python

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: sevenzing/currenttime

jobs:
  lint:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #                check-out repo
      #----------------------------------------------
      - uses: actions/checkout@v2

      #----------------------------------------------
      #  lint with black, markdownlint and hadolint
      #----------------------------------------------
      - uses: psf/black@stable
        name: Black lint
        with:
          options: "--check --verbose"
          src: "app_python/src"
          version: "22.6.0"

      - uses: docker://avtodev/markdown-lint:v1
        name: Markdown lint
        with:
          rules: '/.markdownlint.json'

      - uses: hadolint/hadolint-action@v1.5.0
        name: Dockerfile lint
        with:
          dockerfile: 'app_python/Dockerfile'

  test:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      #----------------------------------------------
      #          install & configure poetry
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: currenttime-venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('app_python/poetry.lock') }}
      #----------------------------------------------
      #            install dependencies
      #----------------------------------------------
      - name: Install dependencies
        run: poetry install --no-interaction
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest .

  security:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
      - uses: actions/checkout@master
      - uses: snyk/actions/setup@master
      - uses: actions/setup-go@v1
        with:
          go-version: '1.13'
      - name: Snyk monitor
        run: snyk test --sarif-file-output=snyk.sarif
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: app_python/snyk.sarif

  push:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
      #----------------------------------------------
      #              check-out repo
      #----------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v2
      #----------------------------------------------
      #         Login to docker registry
      #----------------------------------------------
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      #----------------------------------------------
      #         Extract tags, branch names
      #----------------------------------------------
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      #----------------------------------------------
      #       Push (if taged) to docker registry
      #----------------------------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: app_python
          pull: true
          push: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags') }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
