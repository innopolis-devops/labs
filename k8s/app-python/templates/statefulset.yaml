apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "app-python.fullname" . }}
  labels:
    {{- include "app-python.labels" . | nindent 4 }}
spec:
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "app-python.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "app-python.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "app-python.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: app-python-init
          emptyDir: {}
        - name: {{ .Values.volumes.config.name }}
          configMap:
            name: {{ .Values.volumes.config.name }}
      initContainers:
        - name: app-python-init
          image: python:3.10
          command: [ "curl", "--output", "/app/init/ip.txt", "https://2ip.ru/" ]
          volumeMounts:
            - name: app-python-init
              mountPath: /app/init
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.container_port }}
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 30
            httpGet:
              path: /v1/system/status
              port: {{ .Values.service.container_port }}
          readinessProbe:
            initialDelaySeconds: 30
            httpGet:
              path: /v1/system/status
              port: {{ .Values.service.container_port }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: APP_PYTHON_USER
              valueFrom:
                secretKeyRef:
                  name: app-python-secret
                  key: user
            - name: APP_PYTHON_PASS
              valueFrom:
                secretKeyRef:
                  name: app-python-secret
                  key: pass
          volumeMounts:
            - name: app-python-init
              mountPath: /app/init
              readOnly: true
            - name: {{ .Values.volumes.config.name }}
              mountPath: {{ .Values.volumes.config.mountPath }}
              subPath: {{ .Values.volumes.config.subPath }}
            - name: {{ .Values.volumes.data.name }}
              mountPath: {{ .Values.volumes.data.mountPath }}
          command: [ "bash" ]
          args: [ "-c", "cd ./src && gunicorn --config gunicorn.conf.py app_python.api:app" ]
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

  volumeClaimTemplates:
    - metadata:
        name: {{.Values.volumes.data.name }}
      {{- with .Values.volumes.data.spec }}
      spec:
        {{- toYaml . | nindent 8 }}
      {{- end }}
