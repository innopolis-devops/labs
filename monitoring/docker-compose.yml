version: '3.7'

x-logging:
  &loki-logging
  driver: "json-file"
  options:
    # Log rotation is set using "max-size" and "max-file" parameters of this driver
    max-size: "100m"
    max-file: "10"
    tag: "{{.ImageName}}|{{.Name}}"

services:

  prometheus:
    image: prom/prometheus:v2.39.1
    container_name: monitoring.prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=14d'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.wal-compression'
      - '--storage.tsdb.max-block-duration=4h'
      - '--storage.tsdb.wal-segment-size=60MB'
      - '--storage.tsdb.allow-overlapping-blocks'
      - '--query.max-samples=5000000'
    restart: unless-stopped
    expose:
      - 9090
    ports:
      - "9090:9090"
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"
    logging: *loki-logging
#    healthcheck:
#      test: [ "CMD", "wget", "-f", "http://localhost:9090/-/healthy" ]
#      interval: 10s
#      timeout: 5s
#      start_period: 40s

  grafana:
    image: grafana/grafana:9.1.8
    container_name: monitoring.grafana
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - VIRTUAL_HOST=monitoring.grafana
      - NETWORK_ACCESS=internal
      - VIRTUAL_PORT=3000
    restart: unless-stopped
    expose:
      - 3000
    ports:
      - "3000:3000"
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"
    logging: *loki-logging
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:3000/api/health" ]
#      interval: 10s
#      timeout: 5s
#      start_period: 40s

  promtail:
    image: grafana/promtail:2.6.1
    container_name: monitoring.promtail
    expose:
      - 9080
    ports:
      - "9080:9080"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - promtail-data:/var/lib/promtail/positions
      - ./promtail/promtail.yml:/etc/promtail/promtail.yml
    command:
      - '-config.file=/etc/promtail/promtail.yml'
    restart: unless-stopped
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"
    logging: *loki-logging
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:3000/api/health" ]
#      interval: 10s
#      timeout: 5s
#      start_period: 40s

  loki:
    container_name: monitoring.loki
    image: grafana/loki:2.6.1
    expose:
      - 3100
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/tmp/loki/
    restart: unless-stopped
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"
    logging: *loki-logging
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:3100/ready" ]
#      interval: 10s
#      timeout: 5s
#      start_period: 40s

  app_python:
    container_name: app_python
    image: mcflydesigner/django-iu-lab:latest
    expose:
      - 8000
    ports:
      - "8000:8000"
    restart: unless-stopped
    logging: *loki-logging
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:8000/healthcheck" ]
#      interval: 10s
#      timeout: 5s
#      start_period: 40s

  app_java:
    container_name: app_java
    image: mcflydesigner/spring-ui-lab:latest
    expose:
      - 8080
    ports:
      - "8080:8080"
    restart: unless-stopped
    logging: *loki-logging
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:8080/healthcheck" ]
#      interval: 10s
#      timeout: 5s
#      start_period: 40s

networks:
  monitoring.network:
    ipam:
      driver: default

volumes:
  grafana-data: { }
  loki-data: { }
  promtail-data: { }
  prometheus-data: { }